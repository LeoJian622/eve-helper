<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="xyz.foolcat.eve.evehelper.mapper.system.WalletJournalMapper">
  <resultMap id="BaseResultMap" type="xyz.foolcat.eve.evehelper.domain.system.WalletJournal">
    <!--@mbg.generated-->
    <!--@Table wallet_journal-->
    <result column="id" jdbcType="BIGINT" property="id" />
    <result column="amount" jdbcType="DOUBLE" property="amount" />
    <result column="balance" jdbcType="DOUBLE" property="balance" />
    <result column="context_id" jdbcType="BIGINT" property="contextId" />
    <result column="context_id_type" jdbcType="VARCHAR" property="contextIdType" />
    <result column="date" jdbcType="TIMESTAMP" property="date" />
    <result column="description" jdbcType="LONGVARCHAR" property="description" />
    <result column="first_party_id" jdbcType="INTEGER" property="firstPartyId" />
    <result column="reason" jdbcType="LONGVARCHAR" property="reason" />
    <result column="ref_type" jdbcType="LONGVARCHAR" property="refType" />
    <result column="second_party_id" jdbcType="INTEGER" property="secondPartyId" />
    <result column="tax" jdbcType="DOUBLE" property="tax" />
    <result column="tax_receiver_id" jdbcType="INTEGER" property="taxReceiverId" />
    <result column="owner_id" jdbcType="BIGINT" property="ownerId" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, amount, balance, context_id, context_id_type, `date`, description, first_party_id, 
    reason, ref_type, second_party_id, tax, tax_receiver_id, owner_id
  </sql>
  <insert id="batchInsert" parameterType="map">
    <!--@mbg.generated-->
    insert into wallet_journal
    (id, amount, balance, context_id, context_id_type, `date`, description, first_party_id, 
      reason, ref_type, second_party_id, tax, tax_receiver_id, owner_id)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=BIGINT}, #{item.amount,jdbcType=DOUBLE}, #{item.balance,jdbcType=DOUBLE}, 
        #{item.contextId,jdbcType=BIGINT}, #{item.contextIdType,jdbcType=VARCHAR}, #{item.date,jdbcType=TIMESTAMP}, 
        #{item.description,jdbcType=LONGVARCHAR}, #{item.firstPartyId,jdbcType=INTEGER}, 
        #{item.reason,jdbcType=LONGVARCHAR}, #{item.refType,jdbcType=LONGVARCHAR}, #{item.secondPartyId,jdbcType=INTEGER}, 
        #{item.tax,jdbcType=DOUBLE}, #{item.taxReceiverId,jdbcType=INTEGER}, #{item.ownerId,jdbcType=BIGINT}
        )
    </foreach>
  </insert>
  <insert id="insertOrUpdate" parameterType="xyz.foolcat.eve.evehelper.domain.system.WalletJournal">
    <!--@mbg.generated-->
    insert into wallet_journal
    (id, amount, balance, context_id, context_id_type, `date`, description, first_party_id, 
      reason, ref_type, second_party_id, tax, tax_receiver_id, owner_id)
    values
    (#{id,jdbcType=BIGINT}, #{amount,jdbcType=DOUBLE}, #{balance,jdbcType=DOUBLE}, #{contextId,jdbcType=BIGINT}, 
      #{contextIdType,jdbcType=VARCHAR}, #{date,jdbcType=TIMESTAMP}, #{description,jdbcType=LONGVARCHAR}, 
      #{firstPartyId,jdbcType=INTEGER}, #{reason,jdbcType=LONGVARCHAR}, #{refType,jdbcType=LONGVARCHAR}, 
      #{secondPartyId,jdbcType=INTEGER}, #{tax,jdbcType=DOUBLE}, #{taxReceiverId,jdbcType=INTEGER}, 
      #{ownerId,jdbcType=BIGINT})
    on duplicate key update 
    id = #{id,jdbcType=BIGINT}, 
    amount = #{amount,jdbcType=DOUBLE}, 
    balance = #{balance,jdbcType=DOUBLE}, 
    context_id = #{contextId,jdbcType=BIGINT}, 
    context_id_type = #{contextIdType,jdbcType=VARCHAR}, 
    `date` = #{date,jdbcType=TIMESTAMP}, 
    description = #{description,jdbcType=LONGVARCHAR}, 
    first_party_id = #{firstPartyId,jdbcType=INTEGER}, 
    reason = #{reason,jdbcType=LONGVARCHAR}, 
    ref_type = #{refType,jdbcType=LONGVARCHAR}, 
    second_party_id = #{secondPartyId,jdbcType=INTEGER}, 
    tax = #{tax,jdbcType=DOUBLE}, 
    tax_receiver_id = #{taxReceiverId,jdbcType=INTEGER}, 
    owner_id = #{ownerId,jdbcType=BIGINT}
  </insert>
  <insert id="insertOrUpdateSelective" parameterType="xyz.foolcat.eve.evehelper.domain.system.WalletJournal">
    <!--@mbg.generated-->
    insert into wallet_journal
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="amount != null">
        amount,
      </if>
      <if test="balance != null">
        balance,
      </if>
      <if test="contextId != null">
        context_id,
      </if>
      <if test="contextIdType != null">
        context_id_type,
      </if>
      <if test="date != null">
        `date`,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="firstPartyId != null">
        first_party_id,
      </if>
      <if test="reason != null">
        reason,
      </if>
      <if test="refType != null">
        ref_type,
      </if>
      <if test="secondPartyId != null">
        second_party_id,
      </if>
      <if test="tax != null">
        tax,
      </if>
      <if test="taxReceiverId != null">
        tax_receiver_id,
      </if>
      <if test="ownerId != null">
        owner_id,
      </if>
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=DOUBLE},
      </if>
      <if test="balance != null">
        #{balance,jdbcType=DOUBLE},
      </if>
      <if test="contextId != null">
        #{contextId,jdbcType=BIGINT},
      </if>
      <if test="contextIdType != null">
        #{contextIdType,jdbcType=VARCHAR},
      </if>
      <if test="date != null">
        #{date,jdbcType=TIMESTAMP},
      </if>
      <if test="description != null">
        #{description,jdbcType=LONGVARCHAR},
      </if>
      <if test="firstPartyId != null">
        #{firstPartyId,jdbcType=INTEGER},
      </if>
      <if test="reason != null">
        #{reason,jdbcType=LONGVARCHAR},
      </if>
      <if test="refType != null">
        #{refType,jdbcType=LONGVARCHAR},
      </if>
      <if test="secondPartyId != null">
        #{secondPartyId,jdbcType=INTEGER},
      </if>
      <if test="tax != null">
        #{tax,jdbcType=DOUBLE},
      </if>
      <if test="taxReceiverId != null">
        #{taxReceiverId,jdbcType=INTEGER},
      </if>
      <if test="ownerId != null">
        #{ownerId,jdbcType=BIGINT},
      </if>
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id,jdbcType=BIGINT},
      </if>
      <if test="amount != null">
        amount = #{amount,jdbcType=DOUBLE},
      </if>
      <if test="balance != null">
        balance = #{balance,jdbcType=DOUBLE},
      </if>
      <if test="contextId != null">
        context_id = #{contextId,jdbcType=BIGINT},
      </if>
      <if test="contextIdType != null">
        context_id_type = #{contextIdType,jdbcType=VARCHAR},
      </if>
      <if test="date != null">
        `date` = #{date,jdbcType=TIMESTAMP},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=LONGVARCHAR},
      </if>
      <if test="firstPartyId != null">
        first_party_id = #{firstPartyId,jdbcType=INTEGER},
      </if>
      <if test="reason != null">
        reason = #{reason,jdbcType=LONGVARCHAR},
      </if>
      <if test="refType != null">
        ref_type = #{refType,jdbcType=LONGVARCHAR},
      </if>
      <if test="secondPartyId != null">
        second_party_id = #{secondPartyId,jdbcType=INTEGER},
      </if>
      <if test="tax != null">
        tax = #{tax,jdbcType=DOUBLE},
      </if>
      <if test="taxReceiverId != null">
        tax_receiver_id = #{taxReceiverId,jdbcType=INTEGER},
      </if>
      <if test="ownerId != null">
        owner_id = #{ownerId,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
</mapper>